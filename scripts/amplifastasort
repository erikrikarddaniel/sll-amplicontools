#!/usr/bin/env ruby
#
# = NAME
#
# amplifastasort
#
# = SYNOPSIS
#
# See below, in opt parser block.
#
# = USAGE
#
# See below, in opt parser block.
#
# = AUTHOR
#
# daniel.lundin@scilifelab.se

$VERBOSE = true

require 'optparse'

@options = {
  :reverse => true
}
opt_parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
amplifastasort: Sorts AmpliconNoise formated fasta files on frequence, i.e. the last 'field' in the name
    amplifastasort [options] file0..filen
BANNER

  opts.on "--forward", "Sort from least frequent to most frequent, default no" do |v|
    @options[:reverse] = false
  end

  opts.on "-h", "--help", "This info"  do 
    puts opts
    exit 0
  end

  opts.on "--reverse", "Sort from most frequent to least frequent, default yes" do |v|
    @options[:reverse] = true
  end

  opts.on "-v", "--verbose", "Be verbose"  do |v| 
    @options[:verbose] = v 
  end
end
begin
  opt_parser.parse!
  mandatory = [ ]	# Fill in with mandatory option names (i.e. starting with :)
  missing = mandatory.select { |param| @options[param].nil? }
  unless missing.empty?
    warn "Missing options: #{missing.map { |m| "--#{m}" }.join(", ")}"
    warn opt_parser
    exit 1
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  warn "#{$!}"
  warn opt_parser
  exit 1
end

# Loop over infiles
@data = []
begin
  file = nil
  ARGV.each do |file|
    if file == '-'
      warn "Parsing STDIN" if @options[:verbose]
      io = STDIN
    else
      warn "Parsing #{file}" if @options[:verbose]
      if file =~ /.gz$/
	io = IO.popen("gunzip -c #{file}", "r")
      elsif file =~ /.bz2$/
	io = IO.popen("bunzip2 -c #{file}", "r")
      else
	io = File.new(file)
      end
    end
    io.each do |line|
      line.chomp!
      if line =~ /^>(.*_(\d+))\s*$/
	@data << { :name => $1, :num => $2.to_i, :seq => '' }
      else
	@data[-1][:seq] += line
      end
    end
  end
rescue
  warn "Failed to process file '#{file}': #{$!}, backtrace:\n\t#{$!.backtrace.join("\n\t")}"
end

puts @data.sort_by { |a| eval("#{@options[:reverse] ? '-' : '+'}a[:num]") }.map { |a| ">#{a[:name]}\n#{a[:seq]}" }.join("\n")
